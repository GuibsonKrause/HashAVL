#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "lista.h"

void startList(TList *l)
{
    //Tlista *l = (Tlista*) malloc (sizeof (Tlista));
    l->first = l->last = NULL;
    //return l;
}

TList * startingList()
{
    TList *l = (TList*) malloc (sizeof (TList));
    l->first = l->last = NULL;
    return l;
}

int voidList (TList *l)
{
    if (l->first == NULL)
        return 1;
    else
        return 0;
}

/*
void insertOrdered(TContact *nContact, TList *l)
{
    TNO *novo = (TNO*) malloc (sizeof (TNO));
    int i = 0, j = 0;
    TNO *p = l->first, *aux = l->first;
    novo->contact = nContact;
    novo->prox = NULL;
    novo->previous = NULL;
    
    if (voidList(l))
        l->first = novo; // lista vazia
    else
    {
        while ((p != NULL)&& strcmp(p->contact->name, nContact->name) <= 0) // percorre lista
        {
            aux = p;
            p = p->prox;
        }
        
        if (p == aux) // Novo é menor
        {
            novo->previous = NULL;
            l->first->previous = novo;
            novo->prox = l->first;
            l->first = novo;
        }
        else if (p == NULL) // Novoé o maior
        {
            aux->prox = novo;
            novo->previous = aux;
            novo->prox = NULL;
        }
        else  //  O novo esta no meio
        {
            aux->prox->previous = novo;
            novo->prox = aux->prox;
            novo->previous = aux;
            aux->prox = novo;
        }
    }
}

*/

void insertEndList (TContact *nContact, TList *l)
{
    TNO *novo = (TNO*) malloc (sizeof (TNO));
    novo->contact = nContact;
    novo->next = NULL;

    if (voidList(l))
        l->first = novo;
    else
        l->last->next = novo;
    l->last = novo;
}


void listing(TList *l)
{
    int i = 1;
    TNO *atual = (TNO*)malloc(sizeof(TNO));
    atual = l->first;
    
    if (atual == NULL)
    {
        printf("Vazio!\n\n");
        return;
    }
    while(atual != NULL)
    {
        printf("\nComponete %d da lista\n", i);
        printf("\nNome: %s \nTelefone: %lld\n\n", atual->contact->name, atual->contact->phone);
        atual = atual->next;
        i++;
    }//while
    free(atual);
}

void listingOnFileAmount(TList *l, FILE *closedFile)
{
    // lista no arquivo a quantidade em cada indice
    int i = 0;
    //printf("\E[2J\E[2H");
    TNO *atual = (TNO*)malloc(sizeof(TNO));
    atual = l->first;
    
    if (atual == NULL)
    {
        fprintf(closedFile, "0;");
        return;
    }
    
    while(atual != NULL)
    {
        atual = atual->next;
        i++; // soma mais um para saber quantos elementos estão na lista
    }//while
    
    fprintf(closedFile, "%d;", i); // printa a quantidade de elementos
    
    
}

void listingOnFile(TList *l, FILE *closedFile, int index)
{
    int i = 0;
    //printf("\E[2J\E[2H");
    TNO *atual = (TNO*)malloc(sizeof(TNO));
    atual = l->first;
    
    if (atual == NULL)
    {
        fprintf(closedFile, "%i;Vazio!\n", index); // se aquele indice esqiver vazio printa o indice e vazio
        return;
    }
    
    while(atual != NULL)
    {
        fprintf(closedFile,"%i;%s;%lld\n", index, atual->contact->name, atual->contact->phone); // printa o indice e o elemento que está nelee
        atual = atual->next;
        i++;
    }//while
    
    
    
}

int removeList(TList *l, TContact *nContact)
{
    TNO *ante, *aux;    
    
    if (voidList(l))
    {
        return -1;
    }else
    {
        aux = l->first;
        ante=NULL;
        
        while ((aux != NULL) && (strcmp(aux->contact->name, nContact->name) < 0))
        {
            // se não encontrar anterior recebe o atual que é aux e aux recebe prox
            ante = aux;
            aux = aux->next;
        }
        if(aux==NULL || (strcmp(aux->contact->name, nContact->name) > 0))
        {
            return 0; // se for nulo não existe esse elemento
        }
        
        if (aux != l->first && aux != l->last) //se aux for igua a primeiro e o ultimo elemento
        {
            ante->next = aux->next;
        }
        else
        {
            if (aux == l->first) //se aux for igua a primeiro
            {
                l->first = l->first->next;
            }
            
            if (aux == l->last) //se aux for igua o ultimo
            {
                l->last = ante;
                if (ante != NULL)
                {
                    ante->next = NULL;
                }
            }
        }
    }
    free(aux);
    return 1;
}

int* searchList (TList *l, TContact *nContact)
{
    static int retorno[2];
    retorno[0] = 0; // flag
    retorno[1] = 0;// quantidade de indices verificados
    int a =0 , b = 0;
    
    TNO *ante, *aux;
    
    
    if (voidList(l))
    {
        return retorno;
    }
    else
    {
        aux = l->first;
        ante=NULL;
        
        while ((aux != NULL) && (strcmp(aux->contact->name, nContact->name) < 0))
        {
            retorno[1] = retorno[1] + 1;    	// se não encontrar aumenta mais undice procurado
            aux = aux->next;
        }
        if(aux==NULL || (strcmp(aux->contact->name, nContact->name) > 0)){
            return retorno;
        }
        if (strcmp(aux->contact->name, nContact->name) == 0){ // se encontrar aumenta um e muda a flag para encontrada
            retorno[0] = 1;
            retorno[1] = retorno[1] + 1;
            //free(aux);
            return retorno;
        }
        
        
    }
    //free(aux);
    return retorno;
}

long long searchAmountList (TList *l, TContact *nContact)
{    
    TNO *ante, *aux;    
    
    if (voidList(l))
        return 0;
    else
    {
        aux = l->first;
        ante=NULL;
        
        while ((aux != NULL) && (strcmp(aux->contact->name, nContact->name) < 0))
            aux = aux->next;
        if(aux==NULL || (strcmp(aux->contact->name, nContact->name) > 0))
            return 0;
        if (strcmp(aux->contact->name, nContact->name) == 0)
            return aux->contact->phone;
        return aux->contact->phone; /// retorna o telefone para poder pesquisar na hash aberta
    }
    //free(aux);    
}

// Verifica se a string contem um \n que atrapalha da comparacao.
int checkBarN(char string[])
{
    int i, lenght = strlen(string);
    for (i = 0; i <= lenght; i++)
    {
        if (string[i] == '\n')
            return 1;
    }
    return 0;
}